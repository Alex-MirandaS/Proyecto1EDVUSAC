
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Compilador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Proyecto.Conversor;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ParserSym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\004\000\002\002\003" +
    "\000\002\002\004\000\002\002\003\000\002\002\004\000" +
    "\002\002\003\000\002\002\004\000\002\002\003\000\002" +
    "\002\004\000\002\002\003\000\002\002\004\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\007" +
    "\000\002\004\006\000\002\005\005\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\006\000\002\011\005\000\002\011\003\000" +
    "\002\007\005\000\002\007\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\012\012\000\002\012\011\000\002\013\012" +
    "\000\002\013\011\000\002\014\011\000\002\015\006\000" +
    "\002\015\004\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\017" +
    "\012\000\002\017\011\000\002\023\013\000\002\023\012" +
    "\000\002\023\006\000\002\024\011\000\002\024\014\000" +
    "\002\020\007\000\002\020\006\000\002\020\011\000\002" +
    "\020\010\000\002\025\020\000\002\026\011\000\002\027" +
    "\013\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\003\000\002\030\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\040\037\004\040\041\041\006\042\032\043" +
    "\020\044\035\052\030\055\013\056\027\060\033\061\005" +
    "\062\017\066\023\067\021\074\016\001\002\000\004\074" +
    "\uffeb\001\002\000\004\026\305\001\002\000\004\074\uffe9" +
    "\001\002\000\052\002\ufffc\031\ufffc\037\004\040\041\041" +
    "\006\042\032\043\020\044\035\046\ufffc\047\ufffc\052\030" +
    "\055\013\056\027\057\ufffc\060\033\061\005\062\017\066" +
    "\023\067\021\074\016\001\002\000\052\002\uffcf\031\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\046" +
    "\uffcf\047\uffcf\052\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf" +
    "\061\uffcf\062\uffcf\066\uffcf\067\uffcf\074\uffcf\001\002\000" +
    "\052\002\ufff4\031\ufff4\037\004\040\041\041\006\042\032" +
    "\043\020\044\035\046\ufff4\047\ufff4\052\030\055\013\056" +
    "\027\057\ufff4\060\033\061\005\062\017\066\023\067\021" +
    "\074\016\001\002\000\004\074\263\001\002\000\004\026" +
    "\240\001\002\000\004\002\237\001\002\000\052\002\uffcc" +
    "\031\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\046\uffcc\047\uffcc\052\uffcc\055\uffcc\056\uffcc\057\uffcc" +
    "\060\uffcc\061\uffcc\062\uffcc\066\uffcc\067\uffcc\074\uffcc\001" +
    "\002\000\010\013\uffec\023\235\024\uffec\001\002\000\004" +
    "\030\225\001\002\000\004\074\uffe7\001\002\000\052\002" +
    "\ufff2\031\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043\ufff2" +
    "\044\ufff2\046\ufff2\047\ufff2\052\ufff2\055\ufff2\056\ufff2\057" +
    "\ufff2\060\ufff2\061\ufff2\062\ufff2\066\ufff2\067\ufff2\074\ufff2" +
    "\001\002\000\052\002\uffd0\031\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\046\uffd0\047\uffd0\052\uffd0" +
    "\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\066" +
    "\uffd0\067\uffd0\074\uffd0\001\002\000\052\002\ufff1\031\ufff1" +
    "\037\ufff1\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\046" +
    "\ufff1\047\ufff1\052\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\062\ufff1\066\ufff1\067\ufff1\074\ufff1\001\002\000" +
    "\004\013\222\001\002\000\052\002\ufff6\031\ufff6\037\004" +
    "\040\041\041\006\042\032\043\020\044\035\046\ufff6\047" +
    "\ufff6\052\030\055\013\056\027\057\ufff6\060\033\061\005" +
    "\062\017\066\023\067\021\074\016\001\002\000\052\002" +
    "\uffcd\031\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\046\uffcd\047\uffcd\052\uffcd\055\uffcd\056\uffcd\057" +
    "\uffcd\060\uffcd\061\uffcd\062\uffcd\066\uffcd\067\uffcd\074\uffcd" +
    "\001\002\000\004\026\177\001\002\000\004\022\171\001" +
    "\002\000\052\002\ufffe\031\ufffe\037\004\040\041\041\006" +
    "\042\032\043\020\044\035\046\ufffe\047\ufffe\052\030\055" +
    "\013\056\027\057\ufffe\060\033\061\005\062\017\066\023" +
    "\067\021\074\016\001\002\000\004\074\uffe8\001\002\000" +
    "\004\026\072\001\002\000\052\002\ufff8\031\ufff8\037\004" +
    "\040\041\041\006\042\032\043\020\044\035\046\ufff8\047" +
    "\ufff8\052\030\055\013\056\027\057\ufff8\060\033\061\005" +
    "\062\017\066\023\067\021\074\016\001\002\000\006\045" +
    "\045\074\044\001\002\000\052\002\001\031\001\037\004" +
    "\040\041\041\006\042\032\043\020\044\035\046\001\047" +
    "\001\052\030\055\013\056\027\057\001\060\033\061\005" +
    "\062\017\066\023\067\021\074\016\001\002\000\052\002" +
    "\ufffa\031\ufffa\037\004\040\041\041\006\042\032\043\020" +
    "\044\035\046\ufffa\047\ufffa\052\030\055\013\056\027\057" +
    "\ufffa\060\033\061\005\062\017\066\023\067\021\074\016" +
    "\001\002\000\052\002\uffce\031\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\046\uffce\047\uffce\052\uffce" +
    "\055\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\066" +
    "\uffce\067\uffce\074\uffce\001\002\000\004\074\uffea\001\002" +
    "\000\014\002\ufff9\031\ufff9\046\ufff9\047\ufff9\057\ufff9\001" +
    "\002\000\014\002\uffff\031\uffff\046\uffff\047\uffff\057\uffff" +
    "\001\002\000\004\026\053\001\002\000\004\026\046\001" +
    "\002\000\004\027\047\001\002\000\004\030\050\001\002" +
    "\000\040\037\004\040\041\041\006\042\032\043\020\044" +
    "\035\052\030\055\013\056\027\060\033\061\005\062\017" +
    "\066\023\067\021\074\016\001\002\000\004\031\052\001" +
    "\002\000\052\002\uffd3\031\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\046\uffd3\047\uffd3\052\uffd3\055" +
    "\uffd3\056\uffd3\057\uffd3\060\uffd3\061\uffd3\062\uffd3\066\uffd3" +
    "\067\uffd3\074\uffd3\001\002\000\016\027\055\037\004\040" +
    "\041\041\006\042\032\043\020\001\002\000\004\074\066" +
    "\001\002\000\004\030\063\001\002\000\004\027\057\001" +
    "\002\000\004\030\060\001\002\000\040\037\004\040\041" +
    "\041\006\042\032\043\020\044\035\052\030\055\013\056" +
    "\027\060\033\061\005\062\017\066\023\067\021\074\016" +
    "\001\002\000\004\031\062\001\002\000\052\002\uffd7\031" +
    "\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044\uffd7" +
    "\046\uffd7\047\uffd7\052\uffd7\055\uffd7\056\uffd7\057\uffd7\060" +
    "\uffd7\061\uffd7\062\uffd7\066\uffd7\067\uffd7\074\uffd7\001\002" +
    "\000\040\037\004\040\041\041\006\042\032\043\020\044" +
    "\035\052\030\055\013\056\027\060\033\061\005\062\017" +
    "\066\023\067\021\074\016\001\002\000\004\031\065\001" +
    "\002\000\052\002\uffd6\031\uffd6\037\uffd6\040\uffd6\041\uffd6" +
    "\042\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\052\uffd6\055" +
    "\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\062\uffd6\066\uffd6" +
    "\067\uffd6\074\uffd6\001\002\000\006\023\067\027\uffd1\001" +
    "\002\000\014\037\004\040\041\041\006\042\032\043\020" +
    "\001\002\000\004\027\uffd2\001\002\000\014\002\ufff7\031" +
    "\ufff7\046\ufff7\047\ufff7\057\ufff7\001\002\000\004\037\073" +
    "\001\002\000\004\074\074\001\002\000\004\013\075\001" +
    "\002\000\016\026\103\070\077\071\104\073\102\074\076" +
    "\075\105\001\002\000\036\007\uffda\010\uffda\011\uffda\012" +
    "\uffda\014\uffda\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda" +
    "\024\uffda\025\uffda\026\160\027\uffda\001\002\000\036\007" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\014\uffdb\015\uffdb\016\uffdb" +
    "\017\uffdb\020\uffdb\021\uffdb\023\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\001\002\000\034\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\014\uffdf\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\024" +
    "\uffdf\025\uffdf\027\uffdf\001\002\000\014\007\110\010\112" +
    "\011\111\012\107\024\120\001\002\000\036\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\023\uffd9\024\uffd9\025\uffd9\027\uffd9\001" +
    "\002\000\016\026\103\070\077\071\104\073\102\074\076" +
    "\075\105\001\002\000\036\007\uffdc\010\uffdc\011\uffdc\012" +
    "\uffdc\014\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\027\uffdc\001\002\000\036\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\023\uffd8\024\uffd8\025\uffd8\027" +
    "\uffd8\001\002\000\014\007\110\010\112\011\111\012\107" +
    "\027\113\001\002\000\016\026\103\070\077\071\104\073" +
    "\102\074\076\075\105\001\002\000\016\026\103\070\077" +
    "\071\104\073\102\074\076\075\105\001\002\000\016\026" +
    "\103\070\077\071\104\073\102\074\076\075\105\001\002" +
    "\000\016\026\103\070\077\071\104\073\102\074\076\075" +
    "\105\001\002\000\034\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\014\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\024" +
    "\uffe0\025\uffe0\027\uffe0\001\002\000\034\007\uffe3\010\uffe3" +
    "\011\uffe3\012\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020" +
    "\uffe3\021\uffe3\024\uffe3\025\uffe3\027\uffe3\001\002\000\034" +
    "\007\uffe5\010\112\011\uffe5\012\107\014\uffe5\015\uffe5\016" +
    "\uffe5\017\uffe5\020\uffe5\021\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\001\002\000\034\007\uffe6\010\112\011\uffe6\012\107\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\024\uffe6" +
    "\025\uffe6\027\uffe6\001\002\000\034\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\024\uffe4\025\uffe4\027\uffe4\001\002\000\016\026" +
    "\103\070\077\071\104\073\102\074\076\075\105\001\002" +
    "\000\004\024\137\001\002\000\032\007\110\010\112\011" +
    "\111\012\107\014\126\015\125\016\124\017\127\020\130" +
    "\021\123\024\uffb3\027\uffb3\001\002\000\016\026\103\070" +
    "\077\071\104\073\102\074\076\075\105\001\002\000\016" +
    "\026\103\070\077\071\104\073\102\074\076\075\105\001" +
    "\002\000\016\026\103\070\077\071\104\073\102\074\076" +
    "\075\105\001\002\000\016\026\103\070\077\071\104\073" +
    "\102\074\076\075\105\001\002\000\016\026\103\070\077" +
    "\071\104\073\102\074\076\075\105\001\002\000\016\026" +
    "\103\070\077\071\104\073\102\074\076\075\105\001\002" +
    "\000\016\007\110\010\112\011\111\012\107\024\uffb5\027" +
    "\uffb5\001\002\000\016\007\110\010\112\011\111\012\107" +
    "\024\uffb6\027\uffb6\001\002\000\016\007\110\010\112\011" +
    "\111\012\107\024\uffb9\027\uffb9\001\002\000\016\007\110" +
    "\010\112\011\111\012\107\024\uffb8\027\uffb8\001\002\000" +
    "\016\007\110\010\112\011\111\012\107\024\uffb7\027\uffb7" +
    "\001\002\000\016\007\110\010\112\011\111\012\107\024" +
    "\uffb4\027\uffb4\001\002\000\010\007\142\011\143\074\141" +
    "\001\002\000\004\027\154\001\002\000\006\007\150\011" +
    "\151\001\002\000\004\007\146\001\002\000\004\011\144" +
    "\001\002\000\004\074\145\001\002\000\004\027\uffba\001" +
    "\002\000\004\074\147\001\002\000\004\027\uffbb\001\002" +
    "\000\004\007\153\001\002\000\004\011\152\001\002\000" +
    "\004\027\uffbc\001\002\000\004\027\uffbd\001\002\000\004" +
    "\030\155\001\002\000\040\037\004\040\041\041\006\042" +
    "\032\043\020\044\035\052\030\055\013\056\027\060\033" +
    "\061\005\062\017\066\023\067\021\074\016\001\002\000" +
    "\004\031\157\001\002\000\052\002\uffc0\031\uffc0\037\uffc0" +
    "\040\uffc0\041\uffc0\042\uffc0\043\uffc0\044\uffc0\046\uffc0\047" +
    "\uffc0\052\uffc0\055\uffc0\056\uffc0\057\uffc0\060\uffc0\061\uffc0" +
    "\062\uffc0\066\uffc0\067\uffc0\074\uffc0\001\002\000\016\027" +
    "\164\070\077\071\104\073\102\074\161\075\105\001\002" +
    "\000\006\023\uffda\027\uffda\001\002\000\004\027\167\001" +
    "\002\000\006\023\165\027\uffdd\001\002\000\034\007\uffe2" +
    "\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015\uffe2\016\uffe2\017" +
    "\uffe2\020\uffe2\021\uffe2\024\uffe2\025\uffe2\027\uffe2\001\002" +
    "\000\014\070\077\071\104\073\102\074\161\075\105\001" +
    "\002\000\004\027\uffde\001\002\000\034\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\021\uffe1\024\uffe1\025\uffe1\027\uffe1\001\002\000\014" +
    "\002\ufffd\031\ufffd\046\ufffd\047\ufffd\057\ufffd\001\002\000" +
    "\004\053\172\001\002\000\004\026\173\001\002\000\016" +
    "\026\103\070\077\071\104\073\102\074\076\075\105\001" +
    "\002\000\014\007\110\010\112\011\111\012\107\027\175" +
    "\001\002\000\004\024\176\001\002\000\052\002\uffb2\031" +
    "\uffb2\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\047\uffb2\052\uffb2\055\uffb2\056\uffb2\057\uffb2\060" +
    "\uffb2\061\uffb2\062\uffb2\066\uffb2\067\uffb2\074\uffb2\001\002" +
    "\000\016\026\103\070\077\071\104\073\102\074\076\075" +
    "\105\001\002\000\014\007\110\010\112\011\111\012\107" +
    "\027\201\001\002\000\004\030\202\001\002\000\004\057" +
    "\204\001\002\000\006\031\214\046\215\001\002\000\016" +
    "\026\103\070\077\071\104\073\102\074\076\075\105\001" +
    "\002\000\014\007\110\010\112\011\111\012\107\025\206" +
    "\001\002\000\040\037\004\040\041\041\006\042\032\043" +
    "\020\044\035\052\030\055\013\056\027\060\033\061\005" +
    "\062\017\066\023\067\021\074\016\001\002\000\012\031" +
    "\uffc3\046\uffc3\047\210\057\204\001\002\000\004\024\212" +
    "\001\002\000\006\031\uffc4\046\uffc4\001\002\000\010\031" +
    "\uffc1\046\uffc1\057\204\001\002\000\006\031\uffc2\046\uffc2" +
    "\001\002\000\052\002\uffc6\031\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\052\uffc6" +
    "\055\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\062\uffc6\066" +
    "\uffc6\067\uffc6\074\uffc6\001\002\000\004\025\216\001\002" +
    "\000\040\037\004\040\041\041\006\042\032\043\020\044" +
    "\035\052\030\055\013\056\027\060\033\061\005\062\017" +
    "\066\023\067\021\074\016\001\002\000\004\031\220\001" +
    "\002\000\052\002\uffc5\031\uffc5\037\uffc5\040\uffc5\041\uffc5" +
    "\042\uffc5\043\uffc5\044\uffc5\046\uffc5\047\uffc5\052\uffc5\055" +
    "\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062\uffc5\066\uffc5" +
    "\067\uffc5\074\uffc5\001\002\000\014\002\ufff5\031\ufff5\046" +
    "\ufff5\047\ufff5\057\ufff5\001\002\000\016\026\103\070\077" +
    "\071\104\073\102\074\076\075\105\001\002\000\014\007" +
    "\110\010\112\011\111\012\107\024\224\001\002\000\052" +
    "\002\uffee\031\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\046\uffee\047\uffee\052\uffee\055\uffee\056\uffee" +
    "\057\uffee\060\uffee\061\uffee\062\uffee\066\uffee\067\uffee\074" +
    "\uffee\001\002\000\040\037\004\040\041\041\006\042\032" +
    "\043\020\044\035\052\030\055\013\056\027\060\033\061" +
    "\005\062\017\066\023\067\021\074\016\001\002\000\004" +
    "\031\227\001\002\000\004\061\230\001\002\000\004\026" +
    "\231\001\002\000\016\026\103\070\077\071\104\073\102" +
    "\074\076\075\105\001\002\000\004\027\233\001\002\000" +
    "\004\024\234\001\002\000\052\002\uffbe\031\uffbe\037\uffbe" +
    "\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe\047" +
    "\uffbe\052\uffbe\055\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe" +
    "\062\uffbe\066\uffbe\067\uffbe\074\uffbe\001\002\000\004\074" +
    "\016\001\002\000\006\013\uffed\024\uffed\001\002\000\004" +
    "\002\000\001\002\000\016\026\103\070\077\071\104\073" +
    "\102\074\076\075\105\001\002\000\004\027\242\001\002" +
    "\000\004\030\243\001\002\000\040\037\004\040\041\041" +
    "\006\042\032\043\020\044\035\052\030\055\013\056\027" +
    "\060\033\061\005\062\017\066\023\067\021\074\016\001" +
    "\002\000\004\031\245\001\002\000\054\002\uffca\031\uffca" +
    "\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\044\uffca\046" +
    "\uffca\047\uffca\052\uffca\054\246\055\uffca\056\uffca\057\uffca" +
    "\060\uffca\061\uffca\062\uffca\066\uffca\067\uffca\074\uffca\001" +
    "\002\000\006\030\250\055\251\001\002\000\052\002\uffcb" +
    "\031\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\046\uffcb\047\uffcb\052\uffcb\055\uffcb\056\uffcb\057\uffcb" +
    "\060\uffcb\061\uffcb\062\uffcb\066\uffcb\067\uffcb\074\uffcb\001" +
    "\002\000\040\037\004\040\041\041\006\042\032\043\020" +
    "\044\035\052\030\055\013\056\027\060\033\061\005\062" +
    "\017\066\023\067\021\074\016\001\002\000\004\026\252" +
    "\001\002\000\016\026\103\070\077\071\104\073\102\074" +
    "\076\075\105\001\002\000\004\027\254\001\002\000\004" +
    "\030\255\001\002\000\040\037\004\040\041\041\006\042" +
    "\032\043\020\044\035\052\030\055\013\056\027\060\033" +
    "\061\005\062\017\066\023\067\021\074\016\001\002\000" +
    "\004\031\257\001\002\000\054\002\uffc8\031\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047" +
    "\uffc8\052\uffc8\054\246\055\uffc8\056\uffc8\057\uffc8\060\uffc8" +
    "\061\uffc8\062\uffc8\066\uffc8\067\uffc8\074\uffc8\001\002\000" +
    "\052\002\uffc9\031\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9" +
    "\043\uffc9\044\uffc9\046\uffc9\047\uffc9\052\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\066\uffc9\067\uffc9" +
    "\074\uffc9\001\002\000\004\031\262\001\002\000\052\002" +
    "\uffc7\031\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7" +
    "\044\uffc7\046\uffc7\047\uffc7\052\uffc7\055\uffc7\056\uffc7\057" +
    "\uffc7\060\uffc7\061\uffc7\062\uffc7\066\uffc7\067\uffc7\074\uffc7" +
    "\001\002\000\012\013\uffec\023\235\024\uffec\026\271\001" +
    "\002\000\006\013\266\024\265\001\002\000\052\002\ufff0" +
    "\031\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\046\ufff0\047\ufff0\052\ufff0\055\ufff0\056\ufff0\057\ufff0" +
    "\060\ufff0\061\ufff0\062\ufff0\066\ufff0\067\ufff0\074\ufff0\001" +
    "\002\000\016\026\103\070\077\071\104\073\102\074\076" +
    "\075\105\001\002\000\014\007\110\010\112\011\111\012" +
    "\107\024\270\001\002\000\052\002\uffef\031\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\046\uffef\047" +
    "\uffef\052\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\062\uffef\066\uffef\067\uffef\074\uffef\001\002\000\016\027" +
    "\272\037\004\040\041\041\006\042\032\043\020\001\002" +
    "\000\004\030\300\001\002\000\004\027\274\001\002\000" +
    "\004\030\275\001\002\000\040\037\004\040\041\041\006" +
    "\042\032\043\020\044\035\052\030\055\013\056\027\060" +
    "\033\061\005\062\017\066\023\067\021\074\016\001\002" +
    "\000\004\031\277\001\002\000\052\002\uffd5\031\uffd5\037" +
    "\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046\uffd5" +
    "\047\uffd5\052\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\062\uffd5\066\uffd5\067\uffd5\074\uffd5\001\002\000\040" +
    "\037\004\040\041\041\006\042\032\043\020\044\035\052" +
    "\030\055\013\056\027\060\033\061\005\062\017\066\023" +
    "\067\021\074\016\001\002\000\004\031\302\001\002\000" +
    "\052\002\uffd4\031\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4" +
    "\043\uffd4\044\uffd4\046\uffd4\047\uffd4\052\uffd4\055\uffd4\056" +
    "\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\066\uffd4\067\uffd4" +
    "\074\uffd4\001\002\000\014\002\ufff3\031\ufff3\046\ufff3\047" +
    "\ufff3\057\ufff3\001\002\000\014\002\ufffb\031\ufffb\046\ufffb" +
    "\047\ufffb\057\ufffb\001\002\000\016\026\103\070\077\071" +
    "\104\073\102\074\076\075\105\001\002\000\004\027\307" +
    "\001\002\000\004\030\310\001\002\000\040\037\004\040" +
    "\041\041\006\042\032\043\020\044\035\052\030\055\013" +
    "\056\027\060\033\061\005\062\017\066\023\067\021\074" +
    "\016\001\002\000\004\031\312\001\002\000\052\002\uffbf" +
    "\031\uffbf\037\uffbf\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044" +
    "\uffbf\046\uffbf\047\uffbf\052\uffbf\055\uffbf\056\uffbf\057\uffbf" +
    "\060\uffbf\061\uffbf\062\uffbf\066\uffbf\067\uffbf\074\uffbf\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\310\000\040\002\013\003\035\004\030\005\023\006" +
    "\011\012\006\013\033\014\010\016\036\017\021\024\007" +
    "\025\037\026\025\027\014\030\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\002\303" +
    "\003\035\004\030\005\023\006\011\012\006\013\033\014" +
    "\010\016\036\017\021\024\007\025\037\026\025\027\014" +
    "\030\024\001\001\000\002\001\001\000\040\002\302\003" +
    "\035\004\030\005\023\006\011\012\006\013\033\014\010" +
    "\016\036\017\021\024\007\025\037\026\025\027\014\030" +
    "\024\001\001\000\004\005\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\220\003\035\004\030\005\023\006\011\012\006\013\033" +
    "\014\010\016\036\017\021\024\007\025\037\026\025\027" +
    "\014\030\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\002\167\003\035\004\030\005" +
    "\023\006\011\012\006\013\033\014\010\016\036\017\021" +
    "\024\007\025\037\026\025\027\014\030\024\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\002\070\003\035" +
    "\004\030\005\023\006\011\012\006\013\033\014\010\016" +
    "\036\017\021\024\007\025\037\026\025\027\014\030\024" +
    "\001\001\000\002\001\001\000\040\002\042\003\035\004" +
    "\030\005\023\006\011\012\006\013\033\014\010\016\036" +
    "\017\021\024\007\025\037\026\025\027\014\030\024\001" +
    "\001\000\040\002\041\003\035\004\030\005\023\006\011" +
    "\012\006\013\033\014\010\016\036\017\021\024\007\025" +
    "\037\026\025\027\014\030\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\002\050\003\035\004\030\005\023\006" +
    "\011\012\006\013\033\014\010\016\036\017\021\024\007" +
    "\025\037\026\025\027\014\030\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\053\015\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\060\003\035\004\030\005\023" +
    "\006\011\012\006\013\033\014\010\016\036\017\021\024" +
    "\007\025\037\026\025\027\014\030\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\063\003\035\004" +
    "\030\005\023\006\011\012\006\013\033\014\010\016\036" +
    "\017\021\024\007\025\037\026\025\027\014\030\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\006\053\015\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\077\011\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\077\011\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\077\011\116\001\001\000\006\010\077\011\115\001" +
    "\001\000\006\010\077\011\114\001\001\000\006\010\077" +
    "\011\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\077\011\121\022\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\077\011\135\001\001\000\006" +
    "\010\077\011\134\001\001\000\006\010\077\011\133\001" +
    "\001\000\006\010\077\011\132\001\001\000\006\010\077" +
    "\011\131\001\001\000\006\010\077\011\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\137\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\155\003\035\004\030\005\023" +
    "\006\011\012\006\013\033\014\010\016\036\017\021\024" +
    "\007\025\037\026\025\027\014\030\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\161\010\162\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\165\010\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\077\011\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\077\011\177\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\202\001\001\000\002\001\001" +
    "\000\006\010\077\011\204\001\001\000\002\001\001\000" +
    "\040\002\206\003\035\004\030\005\023\006\011\012\006" +
    "\013\033\014\010\016\036\017\021\024\007\025\037\026" +
    "\025\027\014\030\024\001\001\000\004\020\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\212\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\216\003\035\004\030\005\023\006\011\012" +
    "\006\013\033\014\010\016\036\017\021\024\007\025\037" +
    "\026\025\027\014\030\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\077\011\222" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\225\003\035\004\030\005\023\006\011\012\006\013\033" +
    "\014\010\016\036\017\021\024\007\025\037\026\025\027" +
    "\014\030\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\077\011\121\022\231\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\077\011\121\022\240\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\243\003\035\004" +
    "\030\005\023\006\011\012\006\013\033\014\010\016\036" +
    "\017\021\024\007\025\037\026\025\027\014\030\024\001" +
    "\001\000\002\001\001\000\004\023\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\002\260\003\035\004" +
    "\030\005\023\006\011\012\006\013\033\014\010\016\036" +
    "\017\021\024\007\025\037\026\025\027\014\030\024\001" +
    "\001\000\002\001\001\000\010\010\077\011\121\022\252" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\255\003\035\004\030\005\023\006\011\012\006\013\033" +
    "\014\010\016\036\017\021\024\007\025\037\026\025\027" +
    "\014\030\024\001\001\000\002\001\001\000\004\023\257" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\010\077\011\266\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\006\053\015\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\002" +
    "\275\003\035\004\030\005\023\006\011\012\006\013\033" +
    "\014\010\016\036\017\021\024\007\025\037\026\025\027" +
    "\014\030\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\002\300\003\035\004\030\005\023\006\011\012" +
    "\006\013\033\014\010\016\036\017\021\024\007\025\037" +
    "\026\025\027\014\030\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\077\011\121\022\305\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\002\310\003\035\004\030\005\023" +
    "\006\011\012\006\013\033\014\010\016\036\017\021\024" +
    "\007\025\037\026\025\027\014\030\024\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    /* CAPTURA DEL PROGRAMA */

    private ArrayList <String> instrucciones = new ArrayList();
    private ArrayList <String> errores = new ArrayList();
    Conversor conversor = new Conversor();

public void syntax_error(Symbol s){
        
        System.out.println("Error Sintáctico en la Línea " + (s.left) +
        " Columna "+s.right+ ". No se esperaba este componente: " +s.value+"."); 
        //agregar a errores
        //this.sintaxErrors.add(new ParserError(s.left,s.right,"Sintactico","No se esperaba el simbolo "+s.value));
    }

    /**
     * Método al que se llama automáticamente ante algún error sintáctico 
     * en el que ya no es posible una recuperación de errores.
     **/ 
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea " + 
        (s.left)+ " Columna "+s.right+". Componente " + s.value + 
        " no reconocido."); 
        //agregar a errores
        //this.sintaxErrors.add(new ParserError(s.left,s.right,"Sintactico","No se esperaba el simbolo "+s.value));
    }

    public ArrayList<String> getInstrucciones(){
        return instrucciones;
    }

    public ArrayList<String> getErrores(){
        return errores;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // todo ::= comen 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= todo EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // todo ::= comen todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // todo ::= asign 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // todo ::= asign todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // todo ::= met 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // todo ::= met todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // todo ::= sent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // todo ::= sent todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // todo ::= fun 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // todo ::= fun todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // todo ::= impr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // todo ::= impr todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // todo ::= main 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // todo ::= main todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("todo",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comen ::= COMENTS 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = instrucciones.add(conversor.comentarioS((String)d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comen",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comen ::= COMENTM 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = instrucciones.add(conversor.comentarioM((String)d)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comen",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // asign ::= tida idList PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = instrucciones.add((String)ids); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // asign ::= tida idList ASIG expr PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = instrucciones.add((String)ids+"="+(String)ex); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // asign ::= idList ASIG expr PYCOMA 
            {
              Object RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ids = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = instrucciones.add((String)ids+"="+(String)ex); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("asign",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // idList ::= ID COMA idList 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String) id+","+(String)s;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // idList ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String) id;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("idList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tida ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tida ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tida ::= CHAR 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tida ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tida ::= STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tida",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= expr MAS expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)ex1+"+"+(String)ex2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= expr MEN expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)ex1+"-"+(String)ex2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr MULT expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)ex1+"*"+(String)ex2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr DIV expr 
            {
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object ex1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object ex2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)ex1+"/"+(String)ex2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= ID PARAB PARCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = (String)id+"()";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= ID PARAB paramList PARCER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = (String)id+"("+(String)p+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= PARAB expr PARCER 
            {
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "("+(String)ex+")";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= datList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expr",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramList ::= datList COMA paramList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)d+","+(String)p;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramList ::= datList 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramList",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // datList ::= ENTD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // datList ::= DECD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // datList ::= ID 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // datList ::= BOOLEAD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // datList ::= STRINGD 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = (String)d;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("datList",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // met ::= VOID ID PARAB param PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // met ::= VOID ID PARAB PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("met",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fun ::= tida ID PARAB param PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // fun ::= tida ID PARAB PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("fun",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // main ::= VOID MAIN PARAB PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("main",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // param ::= tida ID COMA param 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // param ::= tida ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sent ::= iff 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sent ::= swit 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // sent ::= forr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sent ::= whil 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sent ::= dowhil 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sent",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // iff ::= IF PARAB con PARCER LLAB todo LLCER elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iff",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // iff ::= IF PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iff",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // elseif ::= ELSE IF PARAB con PARCER LLAB todo LLCER elseif 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // elseif ::= ELSE IF PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // elseif ::= ELSE LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elseif",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // swit ::= SWT PARAB expr PARCER LLAB cas LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // swit ::= SWT PARAB expr PARCER LLAB cas DEF DOSPUNTOS todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("swit",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // cas ::= CASE expr DOSPUNTOS todo cas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // cas ::= CASE expr DOSPUNTOS todo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cas ::= CASE expr DOSPUNTOS todo BRK PYCOMA cas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cas ::= CASE expr DOSPUNTOS todo BRK PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cas",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // forr ::= FOR PARAB INT ID ASIG expr PYCOMA con PYCOMA crecd PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("forr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-13)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // whil ::= WHILE PARAB con PARCER LLAB todo LLCER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("whil",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // dowhil ::= DO LLAB todo LLCER WHILE PARAB con PARCER PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dowhil",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // crecd ::= ID MAS MAS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // crecd ::= ID MEN MEN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // crecd ::= MAS MAS ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // crecd ::= MEN MEN ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("crecd",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // con ::= expr IGUAL expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // con ::= expr DESIG expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // con ::= expr MENORQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // con ::= expr MENORI expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // con ::= expr MAYORQ expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // con ::= expr MAYORI expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // con ::= expr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("con",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // impr ::= CNSL PUNTO WRTE PARAB expr PARCER PYCOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("impr",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
